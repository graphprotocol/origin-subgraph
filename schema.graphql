type Listing @entity {
    id: ID!
    blockNumber: BigInt!
    seller: Bytes!
    depositManager: Bytes!
    deposit: BigInt!
    status: String!                                                             # created, updated, withdrawn, disputed
    offers: [Offer!]! @derivedFrom(field: "listingID")
    listingExtraData: [ListingExtraData!]! @derivedFrom(field: "listingID")     # Records the single events that can be emitted as extra, and effect no storage
    extraDataCount: Int!                                                        # used to derive a relation to the ListingExtraData

    # Below are data grabbed from IPFS
    price: String
    currency: String
    commissionAmount: String
    commissionCurrency: String
    commissionPerUnit: String
    commissionPerUnitCurrency: String
    schemaId: String!
    listingType: String!
    category: String!
    subCategory: String!
    language: String!
    title: String!
    description: String!
    unitsTotal: BigInt!
    dappSchemaId: String
    media: [Media!]! @derivedFrom(field: "listingID")
}

# Array of images on IPFS
type Media @entity {
    id: ID!                 # the IPFS Hash, concatenated with the location in the array
    url: String!
    contentType: String!
    listingID: String!
}

# Extra data that is emitted as an event, not stored on ethereum. Note - not emitted on mainnet yet, so can't test
# ipfs hash kept, since there is no schema to know what will be read from extra data
type ListingExtraData @entity {
    id: ID!                 # concatenation of the listing ID and the amount of ListingExtraDatas
    listingID: String!
    sender: Bytes!
    ipfsHashBytes: Bytes!
    ipfsHashBase58: String!
}

type Offer @entity {
    id: ID!                 # a concatenation of the listing ID and the Offer location in the Offer[]
    listingID: String!
    blockNumber: BigInt!

    # required values, from contract storage
    value: BigInt!          # amount in eth or ERC20 token
    commission: BigInt!
    refund: BigInt!
    buyer: Bytes!           # as in the person offering to buy
    affiliate: Bytes!       # address to send any commission
    arbitrator: Bytes!      # address that settles disputes
    finalizes: BigInt       # According to origin docs, this isnt a required field
    status: Int!            # 0 = undefined, 1 = created, 2 = accepted, 3 = disputed. 4 = finalized, 5 = withdrawn (4 and 5 are supersets of smart contract storage)

    # optional from the schema
    reviews: [Review!]! @derivedFrom(field: "offerID")
    disputer: String        # extra field, so we can store if buyer or seller started dispute
    ruling: BigInt          # only set if it gets ruled - 0: Seller, 1: Buyer, 2: Com + Seller, 3: Com + Buyer

    # Below are data grabbed from IPFS
    schemaId: String!
    listingType: String!
    unitsPurchased: BigInt!
    price: String
    currency: String
    commissionPrice: String
    commissionCurrency: String

    # Extra Data
    offerExtraData: [OfferExtraData!]! @derivedFrom(field: "offerID") # Records the single events that can be emitted as extra, and effect no storage
    extraDataCount: Int!                                              # used to derive a relation to the ListingExtraData
}

# Review made when OfferFinalized is emitted. The Review is stored in ipfs
type Review @entity {
    id: ID!                 # the IPFS hash
    blockNumber: BigInt!
    schemaId: String!
    rating: Int!            # rating 0-5
    text: String!           # review text
    offerID: String!
}

# Extra data that is emitted as an event, not stored in contract. ipfs hash kept, since there is no schema to know what will be read from extra data
type OfferExtraData @entity {
    id: ID!                 # Concatenation of offerID and length of OfferExtraDatas
    offerID: String!
    sender: Bytes!
    ipfsHashBytes: Bytes!
    ipfsHashBase58: String!
}

# Look up listings and offers by user
type User @entity {
    id: ID!
    listings: [Listing!]! @derivedFrom(field: "seller")
    offers: [Offer!]! @derivedFrom(field: "buyer")
}

# A list of addresses, that are valid, and a placeholder ID
type AllowedAffiliate @entity {
    id: ID!
    affiliates: [Bytes!]!
    ipfsHash: [Bytes!]!
}

# Additional data that can be emitted by the marketplace contract, not stored in contract
type MarketplaceData @entity {
    id: ID! #ipfs hash
    party: Bytes!
}