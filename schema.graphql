# it appears a claim can be valid or invalid, but that an entire claim is its own address. kinda what yaniv was talked about.
# this would probably make the ClaimVerifer a single address on mainnet, and the claims Multi-address
# also note, the Claim Verifer has no account storage, it just emits events that a claim is Valid

# EVENTS - TODO
    # do we need:
        # event IdentityUpdated, IdentityDeleted

## events ClaimAdded, ClaimRemoved , ClaimValid, ClaimInvalid
#type Claim @entity {
#    id: ID!             # claimID, used to store them in a mapping
#    topic: BigInt!      # number representing topic of claim (biometric, residence, etc)
#    scheme: BigInt!     # scheme with which this claim SHOULD be verified. or ECDSA, RSA, etc
#    issuer: Bytes!      # The issuers identity contract address, or the addr used to sign signature
#    signature: Bytes!   # proof that the claim issuer issued a claim of topic for this identity
#    data: Bytes!        # the hash of the claim data, sitting in another location
#    uri: String!        # the location of the claim (IPFS)
#    claimValid: Boolean #
#}
#
## a proxy contact for key management and execution
#type KeyHolderData @entity {
#    id: ID! # i think each key is its own contract address, thus making this a contract address
#    executionNone: BigInt!
#    keys: [Bytes32!]! # TODO - might be wrong
#    executions: [Executions!]!
#}
#
#type Key @entity {
#    id: ID! # key
#    keyType: BigInt!
#    purposes: [BigInt!]!
#}
#
#type Execution @entity {
#
#}

# I dont htink I need anything from The above.........

# EVENTS - ListingCreated, ListingUpdated, ListingWithdrawn, ListingArbitrated,
type Listing @entity {
    id: ID!
    seller: Bytes!
    depositManager: Bytes!
    ipfsHashes: [Bytes]! # multiple, from updates. TODO - might be moved into ipfsData
    offers: [Offer!]!
    ipfsData: [IPFSListingData!]! # the data read from IPFS. Includes extraData hashes
    listingExtraData: [ListingExtraData!]! @derivedFrom(field: "listingID")
    status: String!

    # potential others from docs - listingType, category, subCategory, language, title, description, price, unitsTotal, OPTIONAL - media, commission, commissionPerUnit
}

# EVENTS - OfferCreated, OfferAccepted, OfferFinalized, OfferWithdrawn, OfferFundsAdded, OfferDisputed, OfferRuling, OfferData
type Offer @entity {
    id: ID!             # most likely a concatenation of the listing ID and the Offer location in the Offer[]
    # NOTE - offers might have their own unique IDS
    value: BigInt!      # amount in eth or ERC20 token
    commission: BigInt! #
    refund: BigInt!     #
    ipfsHashes: [Bytes]!
    currency: Bytes!    # currency of listing
    buyer: Bytes!       # as in the person offering to buy
    affiliate: Bytes!   # address to send any commission
    arbitrator: Bytes!  # address that settles disputes
    finalizes: BigInt!  #
    # to add, open, withdrawn, finalized, disputeRuled, and make string? to see
    status: Int!        # 0 = undefined, 1 = created, 2 = accepted, 3 = disputed
    ipfsData: [IPFSOfferData!]!
    offerExtraData: [OfferExtraData!]!
    disputer: String    # only set if it gets disputed by buyer of seller
    ruling: String      # only set if it gets ruled

    # Derived from the events being emitted, not stoed within the contract
    eventStatus: String! # open, accepted, withdrawn, finalized, inDispute, disputeRuled

    # potential others from docs - listingType, unitsPurchased, totalPrice

}

# From IPFS, not stored on ethereum
type IPFSListingData @entity {
    id: ID!
    # TODO
}

# Extra data that is emitted as an event, not stored on ethereum
type ListingExtraData @entity {
    id: ID!
    listingID: Bytes!
    sender: Bytes!
    ipfsHash: Bytes!
}

# Extra data that is emitted as an event, not stored on ethereum
type OfferExtraData @entity {
    id: ID! # offerID - the concatenation created in Offer
    sender: Bytes!
    ipfsHash: Bytes!
}

# From IPFS, not on the contract
type IPFSOfferData @entity {
    id: ID!
    # TODO
}

type User @entity {
    id: ID!

    # TODO
}

# might need, would be a list of addresses, that are valid, and a placeholder ID
# EVENTS - AffiliateAdded, AffiliateRemoved
type AllowedAffiliates @entity {
    id: ID!
    affiliates: [Bytes!]!
    ipfsHash: [Bytes!]!
}

# Just additional data that can be emitted by the marketplace contract, not stored in contract
# EVENTS - MarketplaceData
type MarketplaceData @entity {
    id: ID! #ipfs hash
    party: Bytes!
}